### A Pluto.jl notebook ###
# v0.12.4

using Markdown
using InteractiveUtils

# ╔═╡ 92928394-1462-11eb-04fd-557587660fc2
using Logging

# ╔═╡ c395df98-145a-11eb-1716-2de187df1a1a
md"""
# Logging
The [Logging](https://docs.julialang.org/en/v1/stdlib/Logging/index.html) module will be used for efficient debugging and testing during development. 

A logger has its own lower level that it can show. In addition to this there is a global setting that determines the lowest level that will be registered.

Below you find some practical examples of logging
"""

# ╔═╡ dafa45ae-1462-11eb-3338-037167917f4d
disable_logging(LogLevel(-5001))

# ╔═╡ 0560f32a-1462-11eb-0685-09e4f341ddf5
"""
	logdemo1()

A small demo where everything is run on a single logger. Keep in mind when using the global logger, that its lowest level is `Debug` (`LogLevel(-1000)`), so you won't see anything below. 

Also keep in mind that you need to modify the global settings before you can see anything below `Debug`. You can do this with `disable_logging(LogLevel(N))`. 

### keywords
* logger: the logger you want to use. Defaults to the global logger.
"""
function logdemo1(args...; kwargs...)
	# direct all the following messages to my logger
	logger = get(kwargs, :logger, Logging.global_logger())
	with_logger(logger) do
		# print some information about the function
		@info "logdemo1 was invoked with:\n\t- args: $(args)\n\t- kwargs: $(kwargs)\n\t- using logger <$(logger)> (current logger's lowest level: $(Logging.min_enabled_level(logger)))"
		@debug "logdemo1 lowest level message that allows the debug level"
		@logmsg LogLevel(-2000) "not visible by default"
	end
end

# ╔═╡ 8ddac37c-1465-11eb-17d4-fdce80dc78fe
begin
	println("DEMO 1a - USING LOGGING DEFAULT SETTINGS\n$("-"^70)\n\n")
	logdemo1(1,2, goedemorgen="bonjour")
	println("-"^70)
end

# ╔═╡ b05f57c2-1466-11eb-272f-5fc93c04c744
begin 
	println("DEMO 1b - USING A SPECIFIC LOGGER THAT WILL SHOW THE LAST MESSAGE\n$("-"^70)\n\n")
	customlogger = Logging.SimpleLogger(stdout, LogLevel(-2000))
	logdemo1(3,4,logger=customlogger, goedenavond="bonsoir")
	println("-"^70)
end

# ╔═╡ 19b12fc6-1464-11eb-2fc1-cbb3f82479c5
begin
	"""
		logdemo2()

	A small demo where it is possible to direct the logs generated by a specific function to a file. The can be very handy for debugging purposes or analysis after a simulation. By default everything is run on a single logger. 

	### keywords
	* logger: the logger you want to use. Defaults to the global logger.
	* myspecialfunlogfilename: if you want to log `myspecialfun` to a file specify its name. When not specified the global logger is used 
	* myspecialfunlogfilemode: the mode you want to use to write to a file. Defaults to "w" (cf. [write modes](https://docs.julialang.org/en/v1/base/io-network/#Base.open))
	"""
	function logdemo2(args...; kwargs...)
		# direct all the following messages to my logger
		logger = get(kwargs, :logger, Logging.global_logger())
		with_logger(logger) do
			# log message from the 
			@info "logdemo2 was invoked with:\n\t- args: $(args)\n\t- kwargs: $(kwargs)\n\t- using logger <$(logger)> (current logger's lowest level: $(Logging.min_enabled_level(logger)))"
			# verify if a special logger should be used
			if haskey(kwargs, :myspecialfunlogfilename)
				logname = kwargs[:myspecialfunlogfilename]
				logmode = get(kwargs, :myspecialfunlogfilemode, "w")
				io = open(logname, logmode)
				speciallogger = SimpleLogger(io)
			else
				speciallogger = logger
			end
			
			# run the function with the appropriate logger
			with_logger(speciallogger) do
				for i in 1:get(kwargs,:maxrep, 20)
					myspecialfun(i; speciallogger=speciallogger)
				end
			end
			
			# close io if required
			if haskey(kwargs, :myspecialfunlogfilename)
				close(io)
			end
		end
	end

	"""
		myspecialfun(args...; kwargs...)
	
	a function that generates log messages
	
	### keywords
	"""
	function myspecialfun(args...; kwargs...)
		@info "myspecialfun was invoked with:\n\t- args: $(args)\n\t- kwargs: $(kwargs)\n\t- using logger <$(kwargs[:speciallogger])> "
	end
end

# ╔═╡ e3eae0ce-1462-11eb-2e02-fd2f746569d1
begin
	println("DEMO 2a - USING LOGGING DEFAULT SETTINGS\n$("-"^70)\n\n")
	logdemo2(1,2, goedemorgen="bonjour")
	println("-"^70)
end

# ╔═╡ 12710aa4-146b-11eb-034a-97b515563abc
begin
	println("DEMO 2b - USING LOGGING TO FILE SETTINGS\n$("-"^70)\n\n")
	logdemo2(1,2, myspecialfunlogfilename="demo2.log", maxrep=10)
	println("-"^70)
end

# ╔═╡ 0368ea70-145b-11eb-0b5c-fb3a33bf2027
md"""
# SimJulia
"""

# ╔═╡ Cell order:
# ╟─c395df98-145a-11eb-1716-2de187df1a1a
# ╠═92928394-1462-11eb-04fd-557587660fc2
# ╠═dafa45ae-1462-11eb-3338-037167917f4d
# ╠═0560f32a-1462-11eb-0685-09e4f341ddf5
# ╠═8ddac37c-1465-11eb-17d4-fdce80dc78fe
# ╠═b05f57c2-1466-11eb-272f-5fc93c04c744
# ╠═19b12fc6-1464-11eb-2fc1-cbb3f82479c5
# ╠═e3eae0ce-1462-11eb-2e02-fd2f746569d1
# ╠═12710aa4-146b-11eb-034a-97b515563abc
# ╠═0368ea70-145b-11eb-0b5c-fb3a33bf2027
